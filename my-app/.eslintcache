[{"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\index.js":"1","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\App.js":"2","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\Home.js":"4","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\LabTech.js":"5","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\Employee.js":"6","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\LabHome.js":"7","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\TestCollection.js":"8","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\PoolMapping.js":"9","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\WellTesting.js":"10"},{"size":222,"mtime":1607379843664,"results":"11","hashOfConfig":"12"},{"size":1458,"mtime":1607375295241,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":519,"mtime":1607402605607,"results":"15","hashOfConfig":"12"},{"size":2289,"mtime":1607390489194,"results":"16","hashOfConfig":"12"},{"size":489,"mtime":1607375289536,"results":"17","hashOfConfig":"12"},{"size":996,"mtime":1607389832711,"results":"18","hashOfConfig":"12"},{"size":8139,"mtime":1607458029728,"results":"19","hashOfConfig":"12"},{"size":9325,"mtime":1607464983096,"results":"20","hashOfConfig":"12"},{"size":10266,"mtime":1607466598298,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"8r05en",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\index.js",[],["44","45"],"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\App.js",[],"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\Home.js",[],"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\LabTech.js",[],"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\Employee.js",[],"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\LabHome.js",[],"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\TestCollection.js",["46","47"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst columns = [\r\n  { id: 'testid', label: 'Test ID', minWidth: 170 },\r\n  { id: 'employeeid', label: 'Employee ID', minWidth: 100 },\r\n];\r\n\r\nfunction createData(testid, employeeid) {\r\n  return { testid, employeeid };\r\n}\r\nconst rows = [];\r\n\r\nfunction getDate() {\r\n  return new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n}\r\n\r\nfunction clearRows() {\r\n  rows.length = 0;\r\n  return;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '50%',\r\n    margin: 'auto',\r\n  },\r\n  '& .MuiTextField-root': {\r\n    margin: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport default function TestCollection() {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n\r\n  const [isDelInvalid, setDelInvalid] = useState(false);\r\n  const [isDelInvalidText, setDelInvalidText] = useState(\"\");\r\n\r\n  const [isIDInvalid, setIDInvalid] = useState(false);\r\n  const [isIDInvalidText, setIDInvalidText] = useState(\"\");\r\n\r\n  const [isCodeInvalid, setCodeInvalid] = useState(false);\r\n  const [isCodeInvalidText, setCodeInvalidText] = useState(\"\");\r\n\r\n  const addEmpId = useRef(); //reference\r\n  const addTestId = useRef(); //reference\r\n  const removeTestId = useRef(); //reference\r\n\r\n  const addClicked = async e => { //add button clicked\r\n    e.preventDefault();\r\n    const result = await addAPI();\r\n    if (result.status === 450) {\r\n      setIDInvalid(false);\r\n      setIDInvalidText(\"\")\r\n      setCodeInvalid(true);\r\n      setCodeInvalidText(\"This test already exists.\")\r\n    } else if (result.status === 451) {\r\n      setCodeInvalid(false);\r\n      setCodeInvalidText(\"\")\r\n      setIDInvalid(true);\r\n      setIDInvalidText(\"This employee does not exist.\")\r\n    } else {\r\n      setIDInvalid(false);\r\n      setIDInvalidText(\"\")\r\n      setCodeInvalid(false);\r\n      setCodeInvalidText(\"\")\r\n      addEmpId.current.value = \"\"\r\n      addTestId.current.value = \"\"\r\n      setRefreshKey(oldKey => oldKey + 1)\r\n    }\r\n  };\r\n\r\n  const delClicked = async e => { //add button clicked\r\n    e.preventDefault();\r\n    setDelInvalid(false);\r\n    setDelInvalidText(\"\")\r\n\r\n    const result = await delAPI();\r\n    setRefreshKey(oldKey => oldKey + 1)\r\n    if (result.status !== null && result.status === 452) {\r\n      setDelInvalid(true);\r\n      setDelInvalidText(\"Barcode exists in a pool.\")\r\n    } else {\r\n      if (result.affectedRows === 0) {\r\n        setDelInvalid(true);\r\n        setDelInvalidText(\"Barcode does not exist\")\r\n      } else {\r\n        removeTestId.current.value = \"\"\r\n        setDelInvalid(false);\r\n        setDelInvalidText(\"\")\r\n      }\r\n    }\r\n  };\r\n\r\n  const addAPI = async () => { //callAPI is our function, async is telling it that this is an async task\r\n    const resp = await fetch('http://localhost:9000/testCollectionAPI/add?empid=' + addEmpId.current.value + '&testid=' + addTestId.current.value + '&date=' + getDate());\r\n    return resp;\r\n  }\r\n\r\n  const delAPI = async () => { //callAPI is our function, async is telling it that this is an async task\r\n    const resp = await fetch('http://localhost:9000/testCollectionAPI/del?testid=' + removeTestId.current.value)\r\n\r\n    if (resp.status === 452) {\r\n      console.log(resp);\r\n      return resp;\r\n    } else {\r\n      return resp.json();\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  useEffect(async () => { // like componentdidmount, runs at start\r\n    async function retrieveData() {\r\n      const resp = await fetch('http://localhost:9000/testCollectionAPI/ret')\r\n      setData(resp);\r\n      return resp.json();\r\n    }\r\n    const result = await retrieveData();\r\n    clearRows();\r\n    if (result.length !== rows.length) {\r\n      var i;\r\n      for (i = 0; i < result.length; i++) {\r\n        rows.push(createData(result[i].testBarcode, result[i].employeeID))\r\n      }\r\n    }\r\n    setData(result);\r\n    console.log(data);\r\n  }, [refreshKey]);\r\n\r\n  const cellClicked = async e => {\r\n    removeTestId.current.value = e.target.innerHTML;\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1> Test Collection </h1>\r\n      <Link to=\"/labhome\">\r\n        <Button variant=\"contained\" color=\"primary\" href=\"#contained-buttons\">Back</Button>\r\n      </Link>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <div>\r\n        <TextField InputLabelProps={{shrink: true}} required error={isIDInvalid} helperText={isIDInvalidText} inputRef={addEmpId} id=\"standard-required\" label=\"Employee ID\" defaultValue=\"\" />\r\n        <TextField InputLabelProps={{shrink: true}} required error={isCodeInvalid} helperText={isCodeInvalidText} inputRef={addTestId} id=\"standard-required\" label=\"Test ID\" defaultValue=\"\" />\r\n        <Button\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        onClick={addClicked}\r\n        className={classes.button}\r\n        startIcon={<CloudUploadIcon />}\r\n      >Add</Button>\r\n      </div>\r\n      <br/>\r\n      <br/>\r\n      <div>\r\n        <TextField InputLabelProps={{shrink: true}} required error={isDelInvalid} helperText={isDelInvalidText} inputRef={removeTestId} id=\"standard-required\" label=\"Test ID\" defaultValue=\"\" />\r\n        <Button\r\n       variant=\"contained\"\r\n       color=\"secondary\"\r\n       onClick={delClicked}\r\n       className={classes.button}\r\n       startIcon={<DeleteIcon />}\r\n     >Delete</Button>\r\n      </div>\r\n    </form>\r\n    <br/>\r\n    <br/>\r\n    <br/>\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell onClick={cellClicked} key={column.id} align={column.align}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n    </div>\r\n  );\r\n}","C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\PoolMapping.js",["48","49","50","51"],"C:\\Users\\Dylan\\Desktop\\CSE316-FINAL\\ddownard_CSE316_FINAL\\my-app\\src\\components\\WellTesting.js",["52","53","54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":144,"column":13,"nodeType":"62","endLine":160,"endColumn":4},{"ruleId":"60","severity":1,"message":"63","line":160,"column":6,"nodeType":"64","endLine":160,"endColumn":18,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":14,"column":8,"nodeType":"68","messageId":"69","endLine":14,"endColumn":16},{"ruleId":"66","severity":1,"message":"70","line":56,"column":10,"nodeType":"68","messageId":"69","endLine":56,"endColumn":14},{"ruleId":"66","severity":1,"message":"71","line":78,"column":11,"nodeType":"68","messageId":"69","endLine":78,"endColumn":23},{"ruleId":"60","severity":1,"message":"61","line":133,"column":13,"nodeType":"62","endLine":171,"endColumn":4},{"ruleId":"66","severity":1,"message":"70","line":61,"column":10,"nodeType":"68","messageId":"69","endLine":61,"endColumn":14},{"ruleId":"66","severity":1,"message":"71","line":85,"column":11,"nodeType":"68","messageId":"69","endLine":85,"endColumn":23},{"ruleId":"66","severity":1,"message":"72","line":114,"column":11,"nodeType":"68","messageId":"69","endLine":114,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":144,"column":13,"nodeType":"62","endLine":163,"endColumn":4},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["75"],"no-unused-vars","'EditIcon' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'createResult' is assigned a value but never used.","'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [data, refreshKey]",{"range":"78","text":"79"},[5000,5012],"[data, refreshKey]"]